Parser	parser.html#Parser	parser: Parser	
p	parser.html#p	parser: p	
parse_error	parser.html#parse_error,string	parser: parse_error(msg: string)	
setParser	parser.html#setParser,Parser	parser: setParser(a: var Parser)	
getParser	parser.html#getParser	parser: getParser(): var Parser	
binop	parser.html#binop,Expr,BinOP,Expr,CType	parser: binop(a: Expr; op: BinOP; b: Expr; ty: CType): Expr	
unary	parser.html#unary,Expr,UnaryOP,CType	parser: unary(e: Expr; op: UnaryOP; ty: CType): Expr	
showToken	parser.html#showToken	parser: showToken(): string	
warning	parser.html#warning,string	parser: warning(msg: string)	
macro_define	parser.html#macro_define,string,PPMacro	parser: macro_define(name: string; m: PPMacro)	
macro_defined	parser.html#macro_defined,string	parser: macro_defined(name: string): bool	
macro_undef	parser.html#macro_undef,string	parser: macro_undef(name: string)	
expect	parser.html#expect,string	parser: expect(msg: string)	
err	parser.html#err	parser: err(): bool	
error	parser.html#error,string	parser: error(msg: string)	
type_error	parser.html#type_error,string	parser: type_error(msg: string)	
error_incomplete	parser.html#error_incomplete,CType	parser: error_incomplete(ty: CType)	
inTheExpression	parser.html#inTheExpression,Expr	parser: inTheExpression(e: Expr)	
reset	parser.html#reset	parser: reset()	
addString	parser.html#addString,string,string	parser: addString(s: string; filename: string)	
addStdin	parser.html#addStdin	parser: addStdin()	
addFile	parser.html#addFile,File,string	parser: addFile(fd: File; filename: string)	
addFile	parser.html#addFile,string	parser: addFile(filename: string)	
closeParser	parser.html#closeParser	parser: closeParser()	
gettypedef	parser.html#gettypedef,string	parser: gettypedef(name: string): (CType, Location)	
getLabel	parser.html#getLabel,string	parser: getLabel(name: string): (int, Location)	
putLable	parser.html#putLable,string,int	parser: putLable(name: string; t: int)	
getstructdef	parser.html#getstructdef,string	parser: getstructdef(name: string): CType	
putstructdef	parser.html#putstructdef,CType	parser: putstructdef(t: CType)	
getenumdef	parser.html#getenumdef,string	parser: getenumdef(name: string): CType	
putenumdef	parser.html#putenumdef,CType	parser: putenumdef(t: CType)	
getuniondef	parser.html#getuniondef,string	parser: getuniondef(name: string): CType	
putuniondef	parser.html#putuniondef,CType	parser: putuniondef(t: CType)	
getsymtype	parser.html#getsymtype,string	parser: getsymtype(name: string): CType	
putsymtype	parser.html#putsymtype,string,CType	parser: putsymtype(name: string; t: CType)	
enterBlock	parser.html#enterBlock	parser: enterBlock()	
leaveBlock	parser.html#leaveBlock	parser: leaveBlock()	
checkOnce	parser.html#checkOnce,string	parser: checkOnce(filename: string): bool	
addOnce	parser.html#addOnce	parser: addOnce()	
addInclude	parser.html#addInclude,string	parser: addInclude(filename: string): bool	
putToken	parser.html#putToken	parser: putToken()	
isprint	parser.html#isprint,cint	parser: isprint(a: cint): cint	
hexs	parser.html#hexs	parser: hexs	
isFloating	parser.html#isFloating,CType	parser: isFloating(ty: CType): bool	
isSigned	parser.html#isSigned,CType	parser: isSigned(ty: CType): bool	
getsizeof	parser.html#getsizeof,CType	parser: getsizeof(ty: CType): csize_t	
getsizeof	parser.html#getsizeof,Expr	parser: getsizeof(e: Expr): csize_t	
getAlignof	parser.html#getAlignof,CType	parser: getAlignof(ty: CType): csize_t	
getAlignof	parser.html#getAlignof,Expr	parser: getAlignof(e: Expr): csize_t	
checkInteger	parser.html#checkInteger,CType	parser: checkInteger(a: CType): bool	
intcast	parser.html#intcast,Expr,CType	parser: intcast(e: Expr; to: CType): Expr	
type_equal	parser.html#type_equal,CType,CType	parser: type_equal(a, b: CType): bool	
castto	parser.html#castto,Expr,CType	parser: castto(e: Expr; to: CType): Expr	
to	parser.html#to,Expr,uint32	parser: to(e: var Expr; tag: uint32)	
integer_promotions	parser.html#integer_promotions,Expr	parser: integer_promotions(e: Expr): Expr	
integer_promotions	parser.html#integer_promotions,Expr_2	parser: integer_promotions(e: var Expr)	
conv	parser.html#conv,Expr,Expr	parser: conv(a, b: var Expr)	
compatible	parser.html#compatible,CType,CType	parser: compatible(p, expected: CType): bool	
default_argument_promotions	parser.html#default_argument_promotions,Expr	parser: default_argument_promotions(e: Expr): Expr	
checkInteger	parser.html#checkInteger,Expr,Expr	parser: checkInteger(a, b: Expr)	
checkScalar	parser.html#checkScalar,Expr,Expr	parser: checkScalar(a, b: Expr)	
checkArithmetic	parser.html#checkArithmetic,CType	parser: checkArithmetic(a: CType): bool	
checkArithmetic	parser.html#checkArithmetic,Expr,Expr	parser: checkArithmetic(a, b: Expr)	
checkSpec	parser.html#checkSpec,Expr,Expr	parser: checkSpec(a, b: var Expr)	
make_add	parser.html#make_add,Expr,Expr	parser: make_add(result, r: var Expr)	
make_sub	parser.html#make_sub,Expr,Expr	parser: make_sub(result, r: var Expr)	
make_shl	parser.html#make_shl,Expr,Expr	parser: make_shl(result, r: var Expr)	
make_shr	parser.html#make_shr,Expr,Expr	parser: make_shr(result, r: var Expr)	
make_bitop	parser.html#make_bitop,Expr,Expr,BinOP	parser: make_bitop(result, r: var Expr; op: BinOP)	
make_mul	parser.html#make_mul,Expr,Expr	parser: make_mul(result, r: var Expr)	
make_div	parser.html#make_div,Expr,Expr	parser: make_div(result, r: var Expr)	
make_rem	parser.html#make_rem,Expr,Expr	parser: make_rem(result, r: var Expr)	
hex	parser.html#hex,uint	parser: hex(a: uint): string	
stringizing	parser.html#stringizing,char	parser: stringizing(a: char): string	
stringizing	parser.html#stringizing,string	parser: stringizing(a: string): string	
stringizing	parser.html#stringizing,TokenV	parser: stringizing(a: TokenV): string	
stringizing	parser.html#stringizing,seq[TokenV]	parser: stringizing(a: seq[TokenV]): string	
constant_expression	parser.html#constant_expression	parser: constant_expression(): Expr	
Direct	parser.html#Direct	DeclaratorFlags.Direct	
Abstract	parser.html#Abstract	DeclaratorFlags.Abstract	
Function	parser.html#Function	DeclaratorFlags.Function	
DeclaratorFlags	parser.html#DeclaratorFlags	parser: DeclaratorFlags	
abstract_decorator	parser.html#abstract_decorator.t,,	parser: abstract_decorator(base, f): untyped	
postfix	parser.html#postfix,Expr,PostfixOP,CType	parser: postfix(e: Expr; op: PostfixOP; ty: CType): Expr	
consume	parser.html#consume	parser: consume()	
type_specifier_set	parser.html#type_specifier_set	parser: type_specifier_set	
function_specifier_set	parser.html#function_specifier_set	parser: function_specifier_set	
storage_class_specifier_set	parser.html#storage_class_specifier_set	parser: storage_class_specifier_set	
type_qualifier_set	parser.html#type_qualifier_set	parser: type_qualifier_set	
declaration_specifier_set	parser.html#declaration_specifier_set	parser: declaration_specifier_set	
merge_types	parser.html#merge_types,seq[Token]	parser: merge_types(ts: seq[Token]): CType	
type_qualifier_list	parser.html#type_qualifier_list,CType	parser: type_qualifier_list(ty: var CType)	
read_enum_sepcs	parser.html#read_enum_sepcs,CType,Token	parser: read_enum_sepcs(c: var CType; sepc: Token)	
read_struct_union_sepcs	parser.html#read_struct_union_sepcs,CType,Token	parser: read_struct_union_sepcs(c: var CType; sepc: Token)	
specifier_qualifier_list	parser.html#specifier_qualifier_list	parser: specifier_qualifier_list(): CType	
declarator	parser.html#declarator,CType	parser: declarator(base: CType; flags = Direct): Stmt	
initializer_list	parser.html#initializer_list	parser: initializer_list(): Expr	
direct_declarator	parser.html#direct_declarator,CType	parser: direct_declarator(base: CType; flags = Direct): Stmt	
direct_declarator_end	parser.html#direct_declarator_end,CType,string	parser: direct_declarator_end(base: CType; name: string): Stmt	
struct_union	parser.html#struct_union,Token	parser: struct_union(t: Token): CType	
penum	parser.html#penum	parser: penum(): CType	
parameter_type_list	parser.html#parameter_type_list	parser: parameter_type_list(): (bool, seq[(string, CType)])	
declaration_specifiers	parser.html#declaration_specifiers	parser: declaration_specifiers(): CType	
static_assert	parser.html#static_assert	parser: static_assert(): Stmt	
declaration	parser.html#declaration	parser: declaration(): Stmt	
cast_expression	parser.html#cast_expression	parser: cast_expression(): Expr	
type_name	parser.html#type_name	parser: type_name(): (CType, bool)	
unary_expression	parser.html#unary_expression	parser: unary_expression(): Expr	
decimaltoInt	parser.html#decimaltoInt,string	parser: decimaltoInt(s: string): int	
decimal16toInt	parser.html#decimal16toInt,string	parser: decimal16toInt(s: string): int	
decimal2toInt	parser.html#decimal2toInt,string	parser: decimal2toInt(s: string): int	
pow10	parser.html#pow10,int	parser: pow10(a: int): int	
read_pp_number	parser.html#read_pp_number,string,float,int	parser: read_pp_number(s: string; f: var float; n: var int): int	
primary_expression	parser.html#primary_expression	parser: primary_expression(): Expr	
postfix_expression	parser.html#postfix_expression	parser: postfix_expression(): Expr	
multiplicative_expression	parser.html#multiplicative_expression	parser: multiplicative_expression(): Expr	
additive_expression	parser.html#additive_expression	parser: additive_expression(): Expr	
shift_expression	parser.html#shift_expression	parser: shift_expression(): Expr	
relational_expression	parser.html#relational_expression	parser: relational_expression(): Expr	
equality_expression	parser.html#equality_expression	parser: equality_expression(): Expr	
AND_expression	parser.html#AND_expression	parser: AND_expression(): Expr	
exclusive_OR_expression	parser.html#exclusive_OR_expression	parser: exclusive_OR_expression(): Expr	
inclusive_OR_expression	parser.html#inclusive_OR_expression	parser: inclusive_OR_expression(): Expr	
logical_AND_expression	parser.html#logical_AND_expression	parser: logical_AND_expression(): Expr	
logical_OR_expression	parser.html#logical_OR_expression	parser: logical_OR_expression(): Expr	
expression	parser.html#expression	parser: expression(): Expr	
conditional_expression	parser.html#conditional_expression,Expr	parser: conditional_expression(start: Expr): Expr	
conditional_expression	parser.html#conditional_expression	parser: conditional_expression(): Expr	
assignment_expression	parser.html#assignment_expression	parser: assignment_expression(): Expr	
translation_unit	parser.html#translation_unit	parser: translation_unit(): Stmt	
runParser	parser.html#runParser	parser: runParser(): Stmt	
compound_statement	parser.html#compound_statement	parser: compound_statement(): Stmt	
statament	parser.html#statament	parser: statament(): Stmt	
setParser	parser.html#setParser	parser: setParser()	
